pipeline {
    agent any
    
    options { ansiColor('xterm') }

    environment {
        PATH="${env.WORKSPACE}:/var/jenkins_home/.local/bin/:${env.PATH}"
    }

    stages {
        stage ('Checkout Repo') {
            steps {
                cleanWs()
                sh 'git clone https://github.com/junoteam/terraform-cloud-resources-example'
            }
        }

        stage ('Install IaC Tools') {
            steps {
                sh '''
                curl -k -o /tmp/terraform_1.4.6_linux_arm.zip -C - "https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_arm.zip" && unzip /tmp/terraform_1.4.6_linux_arm.zip -d $WORKSPACE && chmod a+x $WORKSPACE/terraform
                '''

                sh '''
                curl -k -o $WORKSPACE/terragrunt -C - "https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.10/terragrunt_linux_arm64" && chmod a+x $WORKSPACE/terragrunt
                '''

                sh '''
                sudo apt update
                sudo apt install -y unzip software-properties-common python3 python3-pip
                python3 -m pip install --upgrade pip
                pip3 install --no-cache-dir pre-commit
                pip3 install --no-cache-dir checkov
                curl -L "$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | grep -o -E -m 1 "https://.+?-linux-amd64.tar.gz")" > terraform-docs.tgz && tar -xzf terraform-docs.tgz terraform-docs && rm terraform-docs.tgz && chmod +x terraform-docs && sudo mv terraform-docs /usr/bin/
                curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E -m 1 "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz && tar -xzf terrascan.tar.gz terrascan && rm terrascan.tar.gz && sudo mv terrascan /usr/bin/ && terrascan init
                curl -L "$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E -m 1 "https://.+?_linux_amd64.zip")" > tflint.zip && unzip tflint.zip && rm tflint.zip && sudo mv tflint /usr/bin/
                curl -L "$(curl -s https://api.github.com/repos/aquasecurity/tfsec/releases/latest | grep -o -E -m 1 "https://.+?tfsec-linux-amd64")" > tfsec && chmod +x tfsec && sudo mv tfsec /usr/bin/
                sudo apt install -y jq && \
                curl -L "$(curl -s https://api.github.com/repos/infracost/infracost/releases/latest | grep -o -E -m 1 "https://.+?-linux-amd64.tar.gz")" > infracost.tgz && tar -xzf infracost.tgz && rm infracost.tgz && sudo mv infracost-linux-amd64 /usr/bin/infracost
                curl -L "$(curl -s https://api.github.com/repos/minamijoyo/tfupdate/releases/latest | grep -o -E -m 1 "https://.+?_linux_amd64.tar.gz")" > tfupdate.tar.gz && tar -xzf tfupdate.tar.gz tfupdate && rm tfupdate.tar.gz && sudo mv tfupdate /usr/bin/
                curl -L "$(curl -s https://api.github.com/repos/minamijoyo/hcledit/releases/latest | grep -o -E -m 1 "https://.+?_linux_amd64.tar.gz")" > hcledit.tar.gz && tar -xzf hcledit.tar.gz hcledit && rm hcledit.tar.gz && sudo mv hcledit /usr/bin/
                '''
            }
        }

        stage ('Check IaC Versions') {
            steps {
                sh 'terraform --version'
                sh 'terragrunt --version'
            }
        }

        stage ('Pre-commit hooks') {
            steps {
                withAWS(credentials: 'aws-naviteq-sandbox', region: 'eu-central-1') {
                    sh '''
                    cd terraform-cloud-resources-example/terraform/
                    pre-commit run -a
                    '''
                }
            }
        }

        stage ('Terraform init') {
            steps {
                withAWS(credentials: 'aws-naviteq-sandbox', region: 'eu-central-1') {
                    sh '''
                    ls -la
                    cd terraform-cloud-resources-example/terraform/
                    terraform init
                    '''
                }
            }
        }

        stage ('Terraform plan') {
            steps {
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to approve Terraform Plan?', ok: 'Yes'
                }
                withAWS(credentials: 'aws-naviteq-sandbox', region: 'eu-central-1') {
                    sh '''
                    cd terraform-cloud-resources-example/terraform/
                    terraform plan -out=tfplan.out
                    '''
                }
            }
        }

        stage ('Terraform apply') {
            steps {
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to approve Terraform Apply?', ok: 'Yes'
                }
                withAWS(credentials: 'aws-naviteq-sandbox', region: 'eu-central-1') {
                    sh '''
                    cd terraform-cloud-resources-example/terraform/
                    terraform apply -auto-approve
                    '''
                }
            }
        }
    }
}
